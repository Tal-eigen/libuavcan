diff --git a/.gitignore b/.gitignore
index a901d64..195ba88 100644
--- a/.gitignore
+++ b/.gitignore
@@ -28,3 +28,21 @@ dsdlc_generated
 
 # Log files
 *.log
+
+#TAGS
+TAGS
+.TAGS
+!TAGS/
+tags
+.tags
+!tags/
+gtags.files
+GTAGS
+GRTAGS
+GPATH
+GSYMS
+cscope.files
+cscope.out
+cscope.in.out
+cscope.po.out
+
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 87d8f72..4214002 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -2,7 +2,7 @@
 # Copyright (C) 2014 Pavel Kirienko <pavel.kirienko@gmail.com>
 #
 
-cmake_minimum_required(VERSION 2.8.11)
+cmake_minimum_required(VERSION 2.8)
 
 project(uavcan C CXX)
 
@@ -19,6 +19,7 @@ set(opts
     "CMAKE_BUILD_TYPE:STRING:RelWithDebInfo:Debug Release RelWithDebInfo MinSizeRel:Build type."
     "CMAKE_CXX_FLAGS:STRING:::C++ flags."
     "CMAKE_C_FLAGS:STRING:::C flags."
+    "UAVCAN_USE_CPP03:BOOL:OFF::Use C++03 standard."
     "UAVCAN_PLATFORM:STRING:generic:generic linux stm32:Platform."
     "CONTINUOUS_INTEGRATION_BUILD:BOOL:OFF::Disable error redirection and timing tests"
     "UAVCAN_CMAKE_VERBOSE:BOOL:OFF::Verbose CMake configure output"
@@ -60,6 +61,9 @@ include_directories(
     ./libuavcan/include/dsdlc_generated
     )
 
+set(UAVCAN_INC ${CMAKE_CURRENT_SOURCE_DIR}/libuavcan/include
+				${CMAKE_CURRENT_SOURCE_DIR}/libuavcan/include/dsdlc_generated 
+				CACHE INTERNAL "uavcan generic includes")
 #
 # Install
 #
@@ -67,44 +71,6 @@ include_directories(
 install(DIRECTORY dsdl DESTINATION share/uavcan)
 
 #
-# Googletest
-#
-if( CMAKE_BUILD_TYPE STREQUAL "Debug" )
-    # (Taken from googletest/README.md documentation)
-    # GTest executables
-    # Download and unpack googletest at configure time
-    configure_file(CMakeLists.txt.in googletest-download/CMakeLists.txt)
-    execute_process(COMMAND ${CMAKE_COMMAND} -G "${CMAKE_GENERATOR}" .
-        RESULT_VARIABLE result
-        WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/googletest-download )
-    if(result)
-        message(WARNING "CMake step for googletest failed: ${result}")
-    else()
-        execute_process(COMMAND ${CMAKE_COMMAND} --build .
-            RESULT_VARIABLE result
-            WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/googletest-download )
-        if(result)
-            message(WARNING "Build step for googletest failed: ${result}")
-        else()
-
-            # Prevent overriding the parent project's compiler/linker
-            # settings on Windows
-            set(gtest_force_shared_crt ON CACHE BOOL "" FORCE)
-
-            # Add googletest directly to our build. This defines
-            # the gtest and gtest_main targets.
-            add_subdirectory(${CMAKE_BINARY_DIR}/googletest-src
-                            ${CMAKE_BINARY_DIR}/googletest-build
-                            EXCLUDE_FROM_ALL)
-
-            set(GTEST_FOUND ON)
-            set(BUILD_TESTING ON)
-            enable_testing()
-        endif()
-    endif()
-endif()
-
-#
 # Subdirectories
 #
 # library
diff --git a/libuavcan/CMakeLists.txt b/libuavcan/CMakeLists.txt
index 2261ebc..4ef761d 100644
--- a/libuavcan/CMakeLists.txt
+++ b/libuavcan/CMakeLists.txt
@@ -4,6 +4,8 @@
 
 cmake_minimum_required(VERSION 2.8)
 
+# This block is redundant.
+#[[
 if(DEFINED CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE ${CMAKE_BUILD_TYPE} CACHE STRING "Debug Release RelWithDebInfo MinSizeRel")
 else()
@@ -18,6 +20,7 @@ if (build_type_lower STREQUAL "debug")
 else ()
     set(DEBUG_BUILD 0)
 endif ()
+]]
 
 project(libuavcan)
 
@@ -51,14 +54,7 @@ add_custom_command(OUTPUT ${CMAKE_BINARY_DIR}/libuavcan_dsdlc_run.stamp
 add_custom_target(libuavcan_dsdlc DEPENDS ${CMAKE_BINARY_DIR}/libuavcan_dsdlc_run.stamp)
 include_directories(${DSDLC_OUTPUT})
 
-#
-# Compiler flags
-#
-if (COMPILER_IS_GCC_COMPATIBLE)
-    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -Wundef")
-    message(STATUS "Using C++11")
-    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
-endif ()
+
 
 if (DEBUG_BUILD)
     add_definitions(-DUAVCAN_DEBUG=1)
@@ -71,6 +67,22 @@ include_directories(include)
 #
 file(GLOB_RECURSE LIBUAVCAN_CXX_FILES RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} "src/*.cpp")
 add_library(uavcan STATIC ${LIBUAVCAN_CXX_FILES})
+
+# 
+# Compiler flags               
+#   
+if (COMPILER_IS_GCC_COMPATIBLE)
+    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -Wundef")
+    if (UAVCAN_USE_CPP03)      
+        message(STATUS "Using C++03")
+        target_compile_options(uavcan PRIVATE -std=c++03 -Wno-variadic-macros 
+                                -Wno-long-long)   
+    else ()
+        message(STATUS "Using C++11 (pass UAVCAN_USE_CPP03=1 to override)")
+        target_compile_options(uavcan PRIVATE -std=c++11)
+    endif ()
+endif ()
+
 add_dependencies(uavcan libuavcan_dsdlc)
 
 install(TARGETS uavcan                            DESTINATION lib)
@@ -84,6 +96,7 @@ install(CODE "execute_process(COMMAND ${PYTHON} setup.py install --record instal
 #
 function(add_libuavcan_test name library flags) # Adds GTest executable and creates target to execute it every build
     find_package(Threads REQUIRED)
+    include_directories(${GTEST_INCLUDE_DIRS})
 
     file(GLOB_RECURSE TEST_CXX_FILES RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} "test/*.cpp")
     add_executable(${name} ${TEST_CXX_FILES})
@@ -93,23 +106,21 @@ function(add_libuavcan_test name library flags) # Adds GTest executable and crea
         set_target_properties(${name} PROPERTIES COMPILE_FLAGS ${flags})
     endif ()
 
-    target_link_libraries(${name} gmock_main)
+    target_link_libraries(${name} ${GTEST_BOTH_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
     target_link_libraries(${name} ${library})
-    if (${UAVCAN_PLATFORM} STREQUAL "linux")
-        target_link_libraries(${name} rt)
-    endif()
+    target_link_libraries(${name} rt)
 
     # Tests run automatically upon successful build
     # If failing tests need to be investigated with debugger, use 'make --ignore-errors'
     if (CONTINUOUS_INTEGRATION_BUILD)
         # Don't redirect test output, and don't run tests suffixed with "RealTime"
-        add_test(NAME ${name}
-                 COMMAND ${name} --gtest_filter=-*RealTime
-                 WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})
+        add_custom_command(TARGET ${name} POST_BUILD
+                           COMMAND ./${name} --gtest_filter=-*RealTime
+                           WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})
     else ()
-        add_test(NAME ${name}
-             COMMAND ${name} 1>"${name}.log" 2>&1
-             WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})
+        add_custom_command(TARGET ${name} POST_BUILD
+                           COMMAND ./${name} 1>"${name}.log" 2>&1
+                           WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})
     endif()
 endfunction()
 
@@ -119,11 +130,13 @@ if (DEBUG_BUILD)
     if (COMPILER_IS_GCC_COMPATIBLE)
         # No such thing as too many warnings
         set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -Werror -pedantic -Wfloat-equal -Wconversion")
-        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wsign-conversion -Wcast-align -Wmissing-declarations -Wlogical-op")
+        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wcast-align -Wmissing-declarations -Wlogical-op")
         set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wdouble-promotion -Wswitch-enum -Wtype-limits -Wno-error=array-bounds")
         set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wzero-as-null-pointer-constant -Wnon-virtual-dtor")
         set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Woverloaded-virtual -Wsign-promo -Wold-style-cast")
         set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-error=deprecated-declarations")
+        #set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Weffc++ -Wno-error=effc++")  # Produces heaps of useless warnings
+        set(cpp03_flags "-std=c++03 -Wno-variadic-macros -Wno-long-long -Wno-zero-as-null-pointer-constant")
         set(optim_flags "-O3 -DNDEBUG -g0")
     else ()
         message(STATUS "Compiler ID: ${CMAKE_CXX_COMPILER_ID}")
@@ -131,14 +144,23 @@ if (DEBUG_BUILD)
     endif ()
 
     # Additional flavours of the library
+#[[
+    add_library(uavcan_cpp03 STATIC ${LIBUAVCAN_CXX_FILES})
+    set_target_properties(uavcan_cpp03 PROPERTIES COMPILE_FLAGS ${cpp03_flags})
+    add_dependencies(uavcan_cpp03 libuavcan_dsdlc)
 
     add_library(uavcan_optim STATIC ${LIBUAVCAN_CXX_FILES})
     set_target_properties(uavcan_optim PROPERTIES COMPILE_FLAGS ${optim_flags})
     add_dependencies(uavcan_optim libuavcan_dsdlc)
-
+]]
+endif()
+    # GTest executables
+#[[
+    find_package(GTest)
     if (GTEST_FOUND)
-        message(STATUS "GTest found, tests will be built and run.")
+        message(STATUS "GTest found, tests will be built and run [${GTEST_INCLUDE_DIRS}] [${GTEST_BOTH_LIBRARIES}]")
         add_libuavcan_test(libuavcan_test       uavcan       "")                 # Default
+        add_libuavcan_test(libuavcan_test_cpp03 uavcan_cpp03 "${cpp03_flags}")   # C++03
         add_libuavcan_test(libuavcan_test_optim uavcan_optim "${optim_flags}")   # Max optimization
     else (GTEST_FOUND)
         message(STATUS "GTest was not found, tests will not be built")
@@ -146,5 +168,5 @@ if (DEBUG_BUILD)
 else ()
     message(STATUS "Release build type: " ${CMAKE_BUILD_TYPE})
 endif ()
-
+]]
 # vim: set et ft=cmake fenc=utf-8 ff=unix sts=4 sw=4 ts=4 :
diff --git a/libuavcan_drivers/stm32/driver/CMakeLists.txt b/libuavcan_drivers/stm32/driver/CMakeLists.txt
index ce8ef00..e189ce3 100644
--- a/libuavcan_drivers/stm32/driver/CMakeLists.txt
+++ b/libuavcan_drivers/stm32/driver/CMakeLists.txt
@@ -2,12 +2,24 @@ include_directories(
     ./include
     )
 
+set(UAVCAN_STM32_INC ${CMAKE_CURRENT_SOURCE_DIR}/include CACHE INTERNAL "stm32 uavcan driver include")
+
 add_library(uavcan_stm32_driver STATIC
     ./src/uc_stm32_can.cpp
     ./src/uc_stm32_clock.cpp
     ./src/uc_stm32_thread.cpp
     )
 
+target_include_directories(uavcan_stm32_driver PUBLIC
+										 					${PROJECT_CONF_DIR}
+                             ${CHIBIOS_INCLUDE_DIRS}
+                             ${CHIBIOS_ROOT}/os/common/ext/CMSIS/ST/STM32F4xx/
+                             ${CHIBIOS_ROOT}/os/common/ext/CMSIS/include/
+                             #TODO: Add better dependency for board.h
+                             ${CMAKE_SOURCE_DIR}/src/stm32_uavcan/include/
+                           )
+target_compile_definitions(uavcan_stm32_driver PRIVATE STM32F429xx)
+
 add_dependencies(uavcan_stm32_driver uavcan)
 
 install(DIRECTORY include/uavcan_stm32 DESTINATION include)
diff --git a/libuavcan_drivers/stm32/driver/src/uc_stm32_can.cpp b/libuavcan_drivers/stm32/driver/src/uc_stm32_can.cpp
index 2fe8ad6..9e0dd0c 100644
--- a/libuavcan_drivers/stm32/driver/src/uc_stm32_can.cpp
+++ b/libuavcan_drivers/stm32/driver/src/uc_stm32_can.cpp
@@ -205,7 +205,7 @@ int CanIface::computeTimings(const uavcan::uint32_t target_bitrate, Timings& out
 #if UAVCAN_STM32_BAREMETAL
     const uavcan::uint32_t pclk = STM32_PCLK1;
 #elif UAVCAN_STM32_CHIBIOS
-    const uavcan::uint32_t pclk = STM32_PCLK1;
+    const uavcan::uint32_t pclk = (SystemCoreClock/4);
 #elif UAVCAN_STM32_NUTTX
     const uavcan::uint32_t pclk = STM32_PCLK1_FREQUENCY;
 #elif UAVCAN_STM32_FREERTOS
